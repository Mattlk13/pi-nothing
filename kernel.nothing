;; -*- mode: scheme -*-

(struct uart ((dr word)
	      (rsr-ecr word)
	      (reserved1 byte 16)
	      (fr word)
	      (reserved2 byte 4)
	      (lpr word)
	      (ibrd word)
	      (fbrd word)
	      (lcr-h word)
	      (cr word)
	      (ifls word)
	      (imsc word)
	      (ris word)
	      (mis word)
	      (icr word)
	      (dmacr word)))

(const uart0 #x101f1000)
(const uart-flag-rx-fifo-empty #x10)
(const uart-flag-tx-fifo-full #x20)

(define (division-by-zero a b)
  (puts (data #"Division by zero\0"))
  (while 1))

(define (putc ch)
  (while (and (? (+ uart0 uart-fr)) uart-flag-tx-fifo-full))
  (! (+ uart0 uart-dr) ch))

(define (poll-for-char)
  (if (and (? (+ uart0 uart-fr)) uart-flag-rx-fifo-empty)
      -1
      (? (+ uart0 uart-dr))))

(define (getc)
  (let ((mutable ch -1))
    (while (= ch -1)
      (set! ch (poll-for-char)))
    ch))

(define (puts p)
  (let ((ch (?byte p)))
    (when ch
      (putc ch)
      (puts (+ p 1)))))

(define (putn* i)
  (if i
      (begin (putn* (/ i 10))
	     (putc (+ (% i 10) 48)))
      0))

(define (putn i)
  (if i
      (putn* i)
      (putc 48)))

(define (putx n)
  (let ((mutable shift 28))
    (while (>=s shift 0)
      (let ((digit (and 15 (>>u n shift))))
	(putc (+ digit (if (>=u digit 10)
			   55 ;; 65 - 10
			   48)))
	(set! shift (- shift 4))))))

(define (newline)
  (putc 13)
  (putc 10))

(define (main)
  (putn 0) (newline)
  (putn 12345) (newline)
  (putn #x12345) (newline)
  (newline)
  (putx 0) (newline)
  (putx 12345) (newline)
  (putx #x12345) (newline)
  (newline)
  (puts (data #"Hello, world!\n\0"))
  (while 1
    (let ((ch (getc)))
      (puts (data #"You typed: \0"))
      (putc ch)
      (newline))))
